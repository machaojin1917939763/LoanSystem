<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loan.system.mapper.StuCustomerMapper">
    
    <resultMap type="StuCustomer" id="StuCustomerResult">
        <result property="customerId"    column="customer_id"    />
        <result property="name"    column="name"    />
        <result property="sex"    column="sex"    />
        <result property="studentId"    column="student_id"    />
        <result property="address"    column="address"    />
        <result property="coBorrowerName"    column="co_borrower_name"    />
        <result property="coBorrowerNameId"    column="co_borrower_name_id"    />
        <result property="classId"    column="class_id"    />
        <result property="creator"    column="creator"    />
        <result property="createTime"    column="create_time"    />
        <result property="updater"    column="updater"    />
        <result property="updateTime"    column="update_time"    />
        <result property="email"    column="email"    />
        <result property="phone"    column="phone"    />
        <result property="majorId"    column="major_id"    />
        <result property="gradeId"    column="grade_id"    />
        <result property="idCard"    column="id_card"    />
        <result property="collegeId"    column="college_id"    />
    </resultMap>

    <sql id="selectStuCustomerVo">
        select customer_id, name, sex, student_id, address, co_borrower_name, class_id, creator, create_time, updater, update_time,email,phone,grade_id,major_id,id_card, co_borrower_name_id,college_id from stu_customer
    </sql>

    <select id="selectStuCustomerList" parameterType="StuCustomer" resultMap="StuCustomerResult">
        <include refid="selectStuCustomerVo"/>
        <where>  
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="sex != null  and sex != ''"> and sex = #{sex}</if>
            <if test="studentId != null  and studentId != ''"> and student_id = #{studentId}</if>
            <if test="address != null  and address != ''"> and address = #{address}</if>
            <if test="coBorrowerName != null  and coBorrowerName != ''"> and co_borrower_name like concat('%', #{coBorrowerName}, '%')</if>
            <if test="classId != null "> and class_id = #{classId}</if>
            <if test="creator != null  and creator != ''"> and creator = #{creator}</if>
            <if test="updater != null  and updater != ''"> and updater = #{updater}</if>
        </where>
    </select>
    
    <select id="selectStuCustomerByCustomerId" parameterType="Long" resultMap="StuCustomerResult">
        <include refid="selectStuCustomerVo"/>
        where customer_id = #{customerId}
    </select>

    <select id="selectStuCustomerOnThis" parameterType="String" resultMap="StuCustomerResult">
        <include refid="selectStuCustomerVo"/>
        where name = #{username}
    </select>

    <insert id="insertStuCustomer" parameterType="StuCustomer" useGeneratedKeys="true" keyProperty="customerId">
        insert into stu_customer
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null and name != ''">name,</if>
            <if test="sex != null">sex,</if>
            <if test="studentId != null">student_id,</if>
            <if test="address != null">address,</if>
            <if test="coBorrowerName != null">co_borrower_name,</if>
            <if test="classId != null">class_id,</if>
            <if test="creator != null">creator,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updater != null">updater,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null and name != ''">#{name},</if>
            <if test="sex != null">#{sex},</if>
            <if test="studentId != null">#{studentId},</if>
            <if test="address != null">#{address},</if>
            <if test="coBorrowerName != null">#{coBorrowerName},</if>
            <if test="classId != null">#{classId},</if>
            <if test="creator != null">#{creator},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updater != null">#{updater},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateStuCustomer" parameterType="StuCustomer">
        update stu_customer
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="sex != null">sex = #{sex},</if>
            <if test="studentId != null">student_id = #{studentId},</if>
            <if test="address != null">address = #{address},</if>
            <if test="coBorrowerName != null">co_borrower_name = #{coBorrowerName},</if>
            <if test="classId != null">class_id = #{classId},</if>
            <if test="creator != null">creator = #{creator},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updater != null">updater = #{updater},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where customer_id = #{customerId}
    </update>

    <delete id="deleteStuCustomerByCustomerId" parameterType="Long">
        delete from stu_customer where customer_id = #{customerId}
    </delete>

    <delete id="deleteStuCustomerByCustomerIds" parameterType="String">
        delete from stu_customer where customer_id in 
        <foreach item="customerId" collection="array" open="(" separator="," close=")">
            #{customerId}
        </foreach>
    </delete>
</mapper>